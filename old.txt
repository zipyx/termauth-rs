// // Welcome
// if app.tabs.index == 0 {
//     match app.user_mode {
//         UserMode::Normal => match key.code {
//             KeyCode::Char('h') => app.on_left(),
//             KeyCode::Char('l') => app.on_right(),
//             KeyCode::Char('q') | KeyCode::Esc => {
//                 disable_raw_mode()?;
//                 terminal.show_cursor()?;
//                 return Ok(())
//             }
//             _ => {}
//         }
//         _ => {}
//     }

// // Sign Up
// } else if app.tabs.index == 1 {
//     match app.user_mode {
//         UserMode::Normal => match key.code {
//             // KeyCode::Char('j') => app.signup = SignUp::Password,
//             // KeyCode::Char('k') => app.signup = SignUp::Username,
//             KeyCode::Char('w') => {
//                 app.account.new_account(
//                     app.new_username.to_owned(), 
//                     app.new_password.to_owned()
//                 );
//                 app.new_username.clear();
//                 app.new_password.clear();
//                 app.account.set_username(app.new_username.to_owned());
//                 app.account.set_password(app.new_password.to_owned());
//                 app.signed_in = true;
//             }
//             KeyCode::Char('j') => {
//                 app.signup = SignUp::Password;
//             }
//             KeyCode::Char('k') => {
//                 app.signup = SignUp::Username;
//             }
//             KeyCode::Char('h') => app.on_left(),
//             KeyCode::Char('l') => app.on_right(),
//             KeyCode::Char('q') | KeyCode::Esc => {
//                 disable_raw_mode()?;
//                 terminal.show_cursor()?;
//                 return Ok(())
//             }
//             KeyCode::Char('i') => {
//                 app.user_mode = UserMode::Username;
//             }
//             KeyCode::Char('p') => {
//                 app.user_mode = UserMode::Password;
//                 app.signup = SignUp::Password;
//             }
//             _ => {}
//         }
//         UserMode::Username => match key.code {
//             KeyCode::Enter => {
//                 app.account.set_username(app.new_username.to_owned());
//                 app.user_mode = UserMode::Password;
//                 app.signup = SignUp::Password;
//             }
//             KeyCode::Char(c) => {
//                 app.new_username.push(c);
//             }
//             KeyCode::Backspace => {
//                 app.new_username.pop();
//             }
//             KeyCode::Esc => {
//                 app.user_mode = UserMode::Normal;
//             }
//             _ => {}
//         }
//         UserMode::Password => match key.code {
//             KeyCode::Enter => {
//                 app.account.set_password(app.new_username.to_owned());
//                 app.user_mode = UserMode::Normal;
//             }
//             KeyCode::Char(c) => {
//                 app.new_password.push(c);
//             }
//             KeyCode::Backspace => {
//                 app.new_password.pop();
//             }
//             KeyCode::Esc => {
//                 app.user_mode = UserMode::Normal;
//             }
//             _ => {}
//         }
//         _ => {}
//     }

// // Login
// } else if app.tabs.index == 2 {
//     match app.user_mode {
//         UserMode::Normal => match key.code {
//             KeyCode::Char('j') => app.on_down_info(),
//             KeyCode::Char('k') => app.on_up_info(),
//             KeyCode::Char('h') => app.on_left(),
//             KeyCode::Char('l') => app.on_right(),
//             KeyCode::Char('q') | KeyCode::Esc => {
//                 disable_raw_mode()?;
//                 terminal.show_cursor()?;
//                 return Ok(())
//             }
//             // KeyCode::Char('i') => {
//             //     app.user_mode = UserMode::Insert;
//             // }
//             _ => {}
//         }
//         _ => {}
//     }

// // Notepad
// } else if app.tabs.index == 3 {
//     match app.user_mode {
//         UserMode::Normal => match key.code {
//             KeyCode::Char('h') => app.on_left(),
//             KeyCode::Char('l') => app.on_right(),
//             KeyCode::Char('q') | KeyCode::Esc => {
//                 disable_raw_mode()?;
//                 terminal.show_cursor()?;
//                 return Ok(())
//             }
//             KeyCode::Char('i') => {
//                 app.user_mode = UserMode::Insert;
//             }
//             _ => {}
//         }
//         UserMode::Insert => match key.code {
//             KeyCode::Enter => {
//                 app.notepad.push(app.input.drain(..).collect());
//             }
//             KeyCode::Char(c) => {
//                 app.input.push(c);
//             }
//             KeyCode::Backspace => {
//                 app.input.pop();
//             }
//             KeyCode::Esc => {
//                 app.user_mode = UserMode::Normal;
//             }
//             _ => {}
//         }
//         _ => {}
//     }

// // Credential Manager
// } else if app.tabs.index == 4 {
//     match app.user_mode {
//         UserMode::Normal => match key.code {
//             KeyCode::Char('h') => app.on_left(),
//             KeyCode::Char('l') => app.on_right(),
//             KeyCode::Char('q') | KeyCode::Esc => {
//                 disable_raw_mode()?;
//                 terminal.show_cursor()?;
//                 return Ok(())
//             }
//             // KeyCode::Char('i') => {
//             //     app.user_mode = UserMode::Insert;
//             // }
//             _ => {}
//         }
//         _ => {}
//     }
// }
// }

// if let Event::Key(key) = event::read()? {
//     match app.user_mode {
//         UserMode::Normal => match key.code {
//             KeyCode::Char('j') => app.on_down_info(),
//             KeyCode::Char('k') => app.on_up_info(),
//             KeyCode::Char('h') => app.on_left(),
//             KeyCode::Char('l') => app.on_right(),
//             KeyCode::Char('q') | KeyCode::Esc => {
//                 disable_raw_mode()?;
//                 terminal.show_cursor()?;
//                 return Ok(())
//             }
//             KeyCode::Char('i') => {
//                 app.user_mode = UserMode::Insert;
//             }
//             _ => {}
//         }
//         UserMode::Insert => match key.code {
//             KeyCode::Enter => {
//                 app.notepad.push(app.input.drain(..).collect());
//             }
//             KeyCode::Char(c) => {
//                 app.input.push(c);
//             }
//             KeyCode::Backspace => {
//                 app.input.pop();
//             }
//             KeyCode::Esc => {
//                 app.user_mode = UserMode::Normal;
//             }
//             _ => {}
//         }
//         UserMode::SignUp => match key.code {
//             KeyCode::Char('j') => app.on_down_account(),
//             KeyCode::Char('k') => app.on_up_account(),
//             KeyCode::Char('h') => app.on_left(),
//             KeyCode::Char('l') => app.on_right(),
//             KeyCode::Char('q') | KeyCode::Esc => {
//                 disable_raw_mode()?;
//                 terminal.show_cursor()?;
//                 return Ok(())
//             }
//             _ => {}
//         }
//         UserMode::LogIn => match key.code {
//             KeyCode::Char('j') => app.on_down_account(),
//             KeyCode::Char('k') => app.on_up_account(),
//             KeyCode::Char('h') => app.on_left(),
//             KeyCode::Char('l') => app.on_right(),
//             KeyCode::Char('q') | KeyCode::Esc => {
//                 disable_raw_mode()?;
//                 terminal.show_cursor()?;
//                 return Ok(())
//             }
//             _ => {}
//         }
//         UserMode::Credential => match key.code {
//             KeyCode::Char('j') => app.on_down_credential(),
//             KeyCode::Char('k') => app.on_up_credential(),
//             KeyCode::Char('h') => app.on_left(),
//             KeyCode::Char('l') => app.on_right(),
//             KeyCode::Char('q') | KeyCode::Esc => {
//                 disable_raw_mode()?;
//                 terminal.show_cursor()?;
//                 return Ok(())
//             }
//             _ => {}
//         }
//     }
// }
// }
// }


// if let Event::Key(key) = event::read()? {
//     // terminal.draw(|f| ui::menu::ui(f, &app, user_choice))?;
//     match app.menu {
//         Menu::Main => match key.code {
//             KeyCode::Char('q') | KeyCode::Esc => {
//                 disable_raw_mode()?;
//                 terminal.show_cursor()?;
//                 return Ok(())
//             } 

//             KeyCode::Enter => {
//                 if user_choice == 0 {
//                     app.menu = Menu::Signup;
//                 } else if user_choice == 1 {
//                     app.menu = Menu::Login;
//                 } else  {
//                     disable_raw_mode()?;
//                     terminal.show_cursor()?;
//                     return Ok(())
//                 }
//             }
//             KeyCode::Char('j') => {
//                 if user_choice < 2 {
//                     user_choice += 1;
//                 }
//             }
//             KeyCode::Char('k') => {
//                 if user_choice > 0 {
//                     user_choice -= 1;
//                 }
//             }
//             _ => {}
//         }
//         Menu::Login => match key.code {
//             KeyCode::Esc => {
//                 app.menu = Menu::Main;
//             } 
//             KeyCode::Char('q') => {
//                 disable_raw_mode()?;
//                 terminal.show_cursor()?;
//                 return Ok(())
//             } 
//             KeyCode::Char('j') => {
//                 if user_choice < 1 {
//                     user_choice += 1;
//                 }
//             }
//             KeyCode::Char('k') => {
//                 if user_choice > 0 {
//                     user_choice -= 1;
//                 }
//             }
//             _ => {}
//         }
//         Menu::Signup => match key.code {
//             KeyCode::Esc => {
//                 app.menu = Menu::Main;
//             } 
//             KeyCode::Char('q') => {
//                 disable_raw_mode()?;
//                 terminal.show_cursor()?;
//                 return Ok(())
//             } 
//             KeyCode::Char('j') => {
//                 if user_choice < 1 {
//                     user_choice += 1;
//                 }
//             }
//             KeyCode::Char('k') => {
//                 if user_choice > 0 {
//                     user_choice -= 1;
//                 }
//             }
//             _ => {}
//         }
//     }
// }


// // ui popup run check
// fn _ui_popup<B: Backend>(terminal: &mut Terminal<B>, mut app: App) -> io::Result<()> {
//     loop {
//         terminal.draw(|f| ui::popup::ui(f, &app))?;

//         if let Event::Key(key) = event::read()? {
//             match key.code {
//                 KeyCode::Char('q') => return Ok(()),
//                 KeyCode::Char('a') => app.signup = !app.signup,
//                 _ => {}
//             }
//         }
//     }
// }

// // ui menu run check
// fn _ui_menu<B: Backend>(terminal: &mut Terminal<B>, mut app: App) -> io::Result<()> {
//     loop {
//         let mut _user_choice = 0;
//         terminal.draw(|f| ui::menu::ui(f, &app, _user_choice))?;

//         if let Event::Key(key) = event::read()? {
//             match key.code {
//                 KeyCode::Char('q') => return Ok(()),
//                 KeyCode::Char('a') => app.signup = !app.signup,
//                 _ => {}
//             }
//         }
//     }
// }

// // run some tests on the terminal for keys pressed
// fn _ui_selection<B: Backend>(terminal: &mut Terminal<B>, mut app: App) -> io::Result<()> {

//     let mut user_choice = 0;
//     loop {
//         terminal.draw(|f| ui::menu::ui(f, &app, user_choice))?;

//         if let Event::Key(key) = event::read()? {
//             match key.code {
//                 KeyCode::Char('q') | KeyCode::Esc => {
//                     disable_raw_mode()?;
//                     terminal.show_cursor()?;
//                     return Ok(())
//                 } 
//                 KeyCode::Enter => {
//                     if user_choice == 0 {
//                         disable_raw_mode()?;
//                         app.signup = !app.signup;
//                         // ui_signup(terminal, app);
//                     } else if user_choice == 1 {
//                         terminal.show_cursor()?;
//                         // app.signup = !app.signup;
//                         // ui_signup(terminal, app);
//                     } else  {
//                         disable_raw_mode()?;
//                         terminal.show_cursor()?;
//                         return Ok(())
//                     }
//                 }
//                 KeyCode::Char('a') => app.signup = !app.signup,
//                 KeyCode::Char('j') => {
//                     if user_choice < 2 {
//                         user_choice += 1;
//                     }
//                 }
//                 KeyCode::Char('k') => {
//                     if user_choice > 0 {
//                         user_choice -= 1;
//                     }
//                 }
//                 _ => {}
//             }
//         }
//     }         
// }

// // Check if we get the input
// fn _ui_signup<B: Backend>(terminal: &mut Terminal<B>, mut app: App) -> io::Result<()> {

//     // let normal_mode = UserMode::Normal;
//     // let insert_mode = UserMode::Insert;
//     let mut user_choice = 0;
//     let mut input = String::new();
//     let prompt = ">> ";
//     loop {

//         terminal.draw(|f| ui::signup::ui(f, &app, prompt, &input, user_choice))?;

//         if let Event::Key(key) = event::read()? {
//             match app.user_mode {
//                 UserMode::Normal => match key.code {
//                     KeyCode::Char('q') | KeyCode::Esc => {
//                         disable_raw_mode()?;
//                         terminal.show_cursor()?;
//                         return Ok(())
//                     } 
//                     KeyCode::Char('i') => {
//                         app.user_mode = UserMode::Insert;
//                     }
//                     KeyCode::Char('j') => {
//                         if user_choice < 1 {
//                             user_choice += 1;
//                         }
//                     }
//                     KeyCode::Char('k') => {
//                         if user_choice > 0 {
//                             user_choice -= 1;
//                         }
//                     }
//                     _ => {}
//                 }
//                 UserMode::Insert => match key.code {
//                     KeyCode::Esc => {
//                         app.user_mode = UserMode::Normal;
//                     }
//                     KeyCode::Char('q') => {
//                         disable_raw_mode()?;
//                         terminal.show_cursor()?;
//                         return Ok(())
//                     } 
//                     KeyCode::Char(c) => {
//                         input.push(c);
//                     }
//                     KeyCode::Backspace => {
//                         input.pop();
//                     }
//                     KeyCode::Enter => {
//                         terminal.show_cursor()?;
//                         return Ok(())
//                     }
//                     _ => {}
//                 }
//             }

//             KeyCode::Backspace => todo!(),
//             KeyCode::Enter => todo!(),
//             KeyCode::Left => todo!(),
//             KeyCode::Right => todo!(),
//             KeyCode::Up => todo!(),
//             KeyCode::Down => todo!(),
//             KeyCode::Home => todo!(),
//             KeyCode::End => todo!(),
//             KeyCode::PageUp => todo!(),
//             KeyCode::PageDown => todo!(),
//             KeyCode::Tab => todo!(),
//             KeyCode::BackTab => todo!(),
//             KeyCode::Delete => todo!(),
//             KeyCode::Insert => todo!(),
//             KeyCode::F(_) => todo!(),
//             KeyCode::Null => todo!(),
//             KeyCode::Esc => todo!(),
//             KeyCode::CapsLock => todo!(),
//             KeyCode::ScrollLock => todo!(),
//             KeyCode::NumLock => todo!(),
//             KeyCode::PrintScreen => todo!(),
//             KeyCode::Pause => todo!(),
//             KeyCode::Menu => todo!(),
//             KeyCode::KeypadBegin => todo!(),
//             KeyCode::Media(_) => todo!(),
//             KeyCode::Modifier(_) => todo!(),

//         }
//     }
// }
// fn login(&mut self, username: String, password: String) -> bool {
//     match self {
//         Auth::Account(account) => {
//             account.validate_account(username, password)
//         }
//     }
// }

// // A person can create an account
// fn create_account(&mut self, username: String, password: String) -> bool {
//     match self {
//         Auth::Account(account) => {
//             account.create_account(username, password)
//         }
//     }
// }

// // A person can change their username and password
// fn change_account(&mut self, username: String, password: String, new_username: String, new_password: String) -> bool {
//     match self {
//         User::Account(account) => {
//             account.change_account(username, password, new_username, new_password)
//         }
//     }
// }

// // A person can change their username
// fn change_username(&mut self, username: String, new_username: String) -> bool {
//     match self {
//         User::Account(account) => {
//             account.change_username(username, new_username)
//         }
//     }
// }

// // A person can change their password
// fn change_password(&self, password: String, new_password: String) -> bool {
//     match self {
//         User::Account(account) => {
//             account.change_password(password, new_password)
//         }
//     }
// }





// use tui::{backend::Backend, Frame, 
//     layout::{Rect, Constraint, Layout, Direction}, 
//     widgets::{Block, Borders, ListItem, List}, 
//     style::{Style, Modifier}, text::{Spans, Span}
// };

// use crate::App;
// use super::utility::helper::draw_help_welcome;

// pub fn draw_login<B: Backend>(f: &mut Frame<B>, app: &mut App, area: Rect) {

//     let chunks = Layout::default()
//         .constraints(
//             [
//                 Constraint::Length(2),
//                 Constraint::Min(1),
//                 Constraint::Length(11),
//             ].as_ref(),
//         ).split(area);

//     // let chunks = Layout::default()
//     //     .constraints(
//     //         [
//     //             Constraint::Length(9),
//     //             Constraint::Min(8),
//     //             Constraint::Length(7),
//     //         ].as_ref(),
//     //     ).split(area);

//     draw_login_block(f, app, chunks[1]);
//     draw_help_welcome(f, app, chunks[2]);
// }

// fn draw_login_block<B: Backend>(f: &mut Frame<B>, app: &mut App, area: Rect) {

//     let chunks = Layout::default()
//         .constraints(
//             [
//                 Constraint::Percentage(50),
//                 Constraint::Percentage(50),
//             ].as_ref(),
//         ).split(area);

//     // The below respresents the left side of tab 2
//     {
//         let chunks = Layout::default()
//             .constraints(
//                 [
//                     Constraint::Percentage(50),
//                     Constraint::Percentage(50),
//                 ].as_ref(),
//             ).direction(Direction::Horizontal) .split(chunks[0]);

//         let menu_display: Vec<ListItem> = app
//             .info.items.iter().map(|i| ListItem::new(vec![Spans::from(Span::raw(*i))]))
//             .collect();

//         let menu = List::new(menu_display)
//             .block(Block::default().borders(Borders::ALL).title("Errors"))
//             .highlight_style(Style::default().add_modifier(Modifier::BOLD))
//             .highlight_symbol("> ");

//         f.render_stateful_widget(menu, chunks[0], &mut app.info.state);
//     }

//     // The below respresents the right side of tab 2
//     {
//         let chunks = Layout::default()
//             .constraints(
//                 [
//                     Constraint::Percentage(50),
//                     Constraint::Percentage(50),
//                 ].as_ref(),
//             ).direction(Direction::Horizontal) .split(chunks[0]);

//         let menu_display: Vec<ListItem> = app
//             .info.items.iter().map(|i| ListItem::new(vec![Spans::from(Span::raw(*i))]))
//             .collect();

//         let menu = List::new(menu_display)
//             .block(Block::default().borders(Borders::ALL).title("Errors"))
//             .highlight_style(Style::default().add_modifier(Modifier::BOLD))
//             .highlight_symbol("> ");

//         f.render_stateful_widget(menu, chunks[1], &mut app.info.state);
//     }

// }
